//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TTDepartment.TTSvc {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TTSvc.ITTServ")]
    public interface ITTServ {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/HelloWorld", ReplyAction="http://tempuri.org/ITTServ/HelloWorldResponse")]
        string HelloWorld(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/HelloWorld", ReplyAction="http://tempuri.org/ITTServ/HelloWorldResponse")]
        System.Threading.Tasks.Task<string> HelloWorldAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/InitDb", ReplyAction="http://tempuri.org/ITTServ/InitDbResponse")]
        string InitDb(bool overwrite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/InitDb", ReplyAction="http://tempuri.org/ITTServ/InitDbResponse")]
        System.Threading.Tasks.Task<string> InitDbAsync(bool overwrite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/AddTicket", ReplyAction="http://tempuri.org/ITTServ/AddTicketResponse")]
        string AddTicket(string title, string description, string token, System.Nullable<int> parent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/AddTicket", ReplyAction="http://tempuri.org/ITTServ/AddTicketResponse")]
        System.Threading.Tasks.Task<string> AddTicketAsync(string title, string description, string token, System.Nullable<int> parent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/AssignTicket", ReplyAction="http://tempuri.org/ITTServ/AssignTicketResponse")]
        string AssignTicket(int id, int assignee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/AssignTicket", ReplyAction="http://tempuri.org/ITTServ/AssignTicketResponse")]
        System.Threading.Tasks.Task<string> AssignTicketAsync(int id, int assignee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/AnswerTicket", ReplyAction="http://tempuri.org/ITTServ/AnswerTicketResponse")]
        string AnswerTicket(int id, string answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/AnswerTicket", ReplyAction="http://tempuri.org/ITTServ/AnswerTicketResponse")]
        System.Threading.Tasks.Task<string> AnswerTicketAsync(int id, string answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetTicket", ReplyAction="http://tempuri.org/ITTServ/GetTicketResponse")]
        string GetTicket(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetTicket", ReplyAction="http://tempuri.org/ITTServ/GetTicketResponse")]
        System.Threading.Tasks.Task<string> GetTicketAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetTicketChildren", ReplyAction="http://tempuri.org/ITTServ/GetTicketChildrenResponse")]
        string GetTicketChildren(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetTicketChildren", ReplyAction="http://tempuri.org/ITTServ/GetTicketChildrenResponse")]
        System.Threading.Tasks.Task<string> GetTicketChildrenAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetAuthorTickets", ReplyAction="http://tempuri.org/ITTServ/GetAuthorTicketsResponse")]
        string GetAuthorTickets(string token, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetAuthorTickets", ReplyAction="http://tempuri.org/ITTServ/GetAuthorTicketsResponse")]
        System.Threading.Tasks.Task<string> GetAuthorTicketsAsync(string token, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetSolverTickets", ReplyAction="http://tempuri.org/ITTServ/GetSolverTicketsResponse")]
        string GetSolverTickets(int id, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetSolverTickets", ReplyAction="http://tempuri.org/ITTServ/GetSolverTicketsResponse")]
        System.Threading.Tasks.Task<string> GetSolverTicketsAsync(int id, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetUnassignedTickets", ReplyAction="http://tempuri.org/ITTServ/GetUnassignedTicketsResponse")]
        string GetUnassignedTickets();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetUnassignedTickets", ReplyAction="http://tempuri.org/ITTServ/GetUnassignedTicketsResponse")]
        System.Threading.Tasks.Task<string> GetUnassignedTicketsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetUserByEmail", ReplyAction="http://tempuri.org/ITTServ/GetUserByEmailResponse")]
        string GetUserByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetUserByEmail", ReplyAction="http://tempuri.org/ITTServ/GetUserByEmailResponse")]
        System.Threading.Tasks.Task<string> GetUserByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetUserById", ReplyAction="http://tempuri.org/ITTServ/GetUserByIdResponse")]
        string GetUserById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetUserById", ReplyAction="http://tempuri.org/ITTServ/GetUserByIdResponse")]
        System.Threading.Tasks.Task<string> GetUserByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/AddDepartment", ReplyAction="http://tempuri.org/ITTServ/AddDepartmentResponse")]
        string AddDepartment(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/AddDepartment", ReplyAction="http://tempuri.org/ITTServ/AddDepartmentResponse")]
        System.Threading.Tasks.Task<string> AddDepartmentAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITTServChannel : TTDepartment.TTSvc.ITTServ, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TTServClient : System.ServiceModel.ClientBase<TTDepartment.TTSvc.ITTServ>, TTDepartment.TTSvc.ITTServ {
        
        public TTServClient() {
        }
        
        public TTServClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TTServClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TTServClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TTServClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string HelloWorld(string name) {
            return base.Channel.HelloWorld(name);
        }
        
        public System.Threading.Tasks.Task<string> HelloWorldAsync(string name) {
            return base.Channel.HelloWorldAsync(name);
        }
        
        public string InitDb(bool overwrite) {
            return base.Channel.InitDb(overwrite);
        }
        
        public System.Threading.Tasks.Task<string> InitDbAsync(bool overwrite) {
            return base.Channel.InitDbAsync(overwrite);
        }
        
        public string AddTicket(string title, string description, string token, System.Nullable<int> parent) {
            return base.Channel.AddTicket(title, description, token, parent);
        }
        
        public System.Threading.Tasks.Task<string> AddTicketAsync(string title, string description, string token, System.Nullable<int> parent) {
            return base.Channel.AddTicketAsync(title, description, token, parent);
        }
        
        public string AssignTicket(int id, int assignee) {
            return base.Channel.AssignTicket(id, assignee);
        }
        
        public System.Threading.Tasks.Task<string> AssignTicketAsync(int id, int assignee) {
            return base.Channel.AssignTicketAsync(id, assignee);
        }
        
        public string AnswerTicket(int id, string answer) {
            return base.Channel.AnswerTicket(id, answer);
        }
        
        public System.Threading.Tasks.Task<string> AnswerTicketAsync(int id, string answer) {
            return base.Channel.AnswerTicketAsync(id, answer);
        }
        
        public string GetTicket(int id) {
            return base.Channel.GetTicket(id);
        }
        
        public System.Threading.Tasks.Task<string> GetTicketAsync(int id) {
            return base.Channel.GetTicketAsync(id);
        }
        
        public string GetTicketChildren(int id) {
            return base.Channel.GetTicketChildren(id);
        }
        
        public System.Threading.Tasks.Task<string> GetTicketChildrenAsync(int id) {
            return base.Channel.GetTicketChildrenAsync(id);
        }
        
        public string GetAuthorTickets(string token, string status) {
            return base.Channel.GetAuthorTickets(token, status);
        }
        
        public System.Threading.Tasks.Task<string> GetAuthorTicketsAsync(string token, string status) {
            return base.Channel.GetAuthorTicketsAsync(token, status);
        }
        
        public string GetSolverTickets(int id, string status) {
            return base.Channel.GetSolverTickets(id, status);
        }
        
        public System.Threading.Tasks.Task<string> GetSolverTicketsAsync(int id, string status) {
            return base.Channel.GetSolverTicketsAsync(id, status);
        }
        
        public string GetUnassignedTickets() {
            return base.Channel.GetUnassignedTickets();
        }
        
        public System.Threading.Tasks.Task<string> GetUnassignedTicketsAsync() {
            return base.Channel.GetUnassignedTicketsAsync();
        }
        
        public string GetUserByEmail(string email) {
            return base.Channel.GetUserByEmail(email);
        }
        
        public System.Threading.Tasks.Task<string> GetUserByEmailAsync(string email) {
            return base.Channel.GetUserByEmailAsync(email);
        }
        
        public string GetUserById(int id) {
            return base.Channel.GetUserById(id);
        }
        
        public System.Threading.Tasks.Task<string> GetUserByIdAsync(int id) {
            return base.Channel.GetUserByIdAsync(id);
        }
        
        public string AddDepartment(string name) {
            return base.Channel.AddDepartment(name);
        }
        
        public System.Threading.Tasks.Task<string> AddDepartmentAsync(string name) {
            return base.Channel.AddDepartmentAsync(name);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TTSvc.IAuthServ")]
    public interface IAuthServ {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthServ/Login", ReplyAction="http://tempuri.org/IAuthServ/LoginResponse")]
        string Login(string email, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthServ/Login", ReplyAction="http://tempuri.org/IAuthServ/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string email, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthServ/Register", ReplyAction="http://tempuri.org/IAuthServ/RegisterResponse")]
        string Register(string name, string email, string hash, string salt, int department);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthServ/Register", ReplyAction="http://tempuri.org/IAuthServ/RegisterResponse")]
        System.Threading.Tasks.Task<string> RegisterAsync(string name, string email, string hash, string salt, int department);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthServ/Logout", ReplyAction="http://tempuri.org/IAuthServ/LogoutResponse")]
        string Logout(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthServ/Logout", ReplyAction="http://tempuri.org/IAuthServ/LogoutResponse")]
        System.Threading.Tasks.Task<string> LogoutAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthServ/GetSalt", ReplyAction="http://tempuri.org/IAuthServ/GetSaltResponse")]
        string GetSalt(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthServ/GetSalt", ReplyAction="http://tempuri.org/IAuthServ/GetSaltResponse")]
        System.Threading.Tasks.Task<string> GetSaltAsync(string email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthServChannel : TTDepartment.TTSvc.IAuthServ, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthServClient : System.ServiceModel.ClientBase<TTDepartment.TTSvc.IAuthServ>, TTDepartment.TTSvc.IAuthServ {
        
        public AuthServClient() {
        }
        
        public AuthServClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthServClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthServClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthServClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Login(string email, string hash) {
            return base.Channel.Login(email, hash);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string email, string hash) {
            return base.Channel.LoginAsync(email, hash);
        }
        
        public string Register(string name, string email, string hash, string salt, int department) {
            return base.Channel.Register(name, email, hash, salt, department);
        }
        
        public System.Threading.Tasks.Task<string> RegisterAsync(string name, string email, string hash, string salt, int department) {
            return base.Channel.RegisterAsync(name, email, hash, salt, department);
        }
        
        public string Logout(string token) {
            return base.Channel.Logout(token);
        }
        
        public System.Threading.Tasks.Task<string> LogoutAsync(string token) {
            return base.Channel.LogoutAsync(token);
        }
        
        public string GetSalt(string email) {
            return base.Channel.GetSalt(email);
        }
        
        public System.Threading.Tasks.Task<string> GetSaltAsync(string email) {
            return base.Channel.GetSaltAsync(email);
        }
    }
}
